#pragma once

#include <vector>
#include "rbjit/dominatorfinder.h"

RBJIT_NAMESPACE_BEGIN

class ControlFlowGraph;
class BlockHeader;

// Lengauer-Tarjan dominator finding algorithm
// cf.
// Thomas Lengauer and Robert Endre Tarjan, "A Fast Algorithm for Finding
// Dominators in a Flowgraph"
class LTDominatorFinder : public DominatorFinder {
public:

  LTDominatorFinder(ControlFlowGraph* cfg);

  std::vector<BlockHeader*> dominators();
  void setDominatorsToCfg();

private:

#ifdef RBJIT_DEBUG
  void debugVerify(std::vector<BlockHeader*>& doms);
#endif

  void findDominators();

  void dfs();
  void compress(int v);
  int eval(int v);
  void link(int v, int w);

  // parent(w): The vertex which is the parent of vertex _w_ in the spanning
  // tree generated by the search.
  std::vector<int> parent_;

  // pred(w): The set of verteces _v_ such that (v, w) is an edge of the graph.
  std::vector<std::vector<int> > pred_;

  // semi(w): A number defined as follows:
  // (i) Before vertex _w_ is numbered, semi(v) = 0
  // (ii) After _w_ is numbered but before its semidominator is computed,
  // semi(w) is the number of _w_.
  // (iii) After the semidominator of _w_ is computed, semi(w) is the number of
  // the semidominator of _w_.
  std::vector<int> semi_;

  // vertex(i): The vertex whose number is i
  std::vector<int> vertex_;

  // bucket(w): A set of vertices whose semidominator is _w_.
  std::vector<std::vector<int> > bucket_;

  // dom(w): A vertex defined as follows:
  // (i) After step 3, if the semidominator of _w_ is its immediate dominator,
  // then dom(w) is the immediate dominator of _w_. Otherwise dom(w) is a
  // vertex _v_ whose number is smaller than _w_ and whose immediate dominator
  // is also _w_'s immediate dominator.
  // (ii) After step 4, dom(w) is the immediate dominator of _w_.
  std::vector<int> dom_;

  std::vector<int> ancestor_;
  std::vector<int> child_;
  std::vector<int> size_;

  std::vector<int> label_;
  bool computed_;
};

RBJIT_NAMESPACE_END
